name: Update README and Check Links

on:
  push:
    branches:
      - main  # or your default branch name
  pull_request:
    paths:
      - 'README.md'
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays at 00:00 UTC

jobs:
  update-readme-and-check-links:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}
      
      - name: Check commit message and update README
        id: check_commit
        run: |
          LATEST_COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ $LATEST_COMMIT_MSG == *"-check"* ]]; then
            echo "CHECK_LINKS=true" >> $GITHUB_OUTPUT
            sed -i '/Commits until next check:/d' README.md
            echo -e "\nCommits until next check: 10" >> README.md
          else
            PUSH_COUNT=$(git rev-list --count HEAD)
            COMMITS_UNTIL_NEXT=$((10 - (PUSH_COUNT % 10)))
            if [ $COMMITS_UNTIL_NEXT -eq 10 ]; then
              COMMITS_UNTIL_NEXT=0
            fi
            if [ $COMMITS_UNTIL_NEXT -eq 0 ]; then
              echo "CHECK_LINKS=true" >> $GITHUB_OUTPUT
              sed -i '/Commits until next check:/d' README.md
              echo -e "\nCommits until next check: 10" >> README.md
            else
              echo "CHECK_LINKS=false" >> $GITHUB_OUTPUT
              sed -i '/Commits until next check:/d' README.md
              echo -e "\nCommits until next check: $COMMITS_UNTIL_NEXT" >> README.md
            fi
          fi

      - name: Commit README changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add README.md
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update README counter [skip ci]" && git push)

      - name: Setup Dart
        if: steps.check_commit.outputs.CHECK_LINKS == 'true'
        uses: dart-lang/setup-dart@v1

      - name: Install linkcheck
        if: steps.check_commit.outputs.CHECK_LINKS == 'true'
        run: dart pub global activate linkcheck

      - name: Extract and clean URLs from README
        if: steps.check_commit.outputs.CHECK_LINKS == 'true'
        run: |
          grep -oP '(?<=\()https?://[^\s)]+' README.md | sed 's/%09//g' | sed 's/[[:space:]]*$//' > urls.txt

      - name: Check links individually
        if: steps.check_commit.outputs.CHECK_LINKS == 'true'
        run: |
          mkdir -p linkcheck_results
          while IFS= read -r url
          do
            echo "Checking: $url"
            timeout 30s linkcheck "$url" -e > "linkcheck_results/$(echo $url | md5sum | cut -d' ' -f1).txt" 2>&1 || echo "Error or timeout occurred for $url"
          done < urls.txt

      - name: Compile linkcheck results
        if: steps.check_commit.outputs.CHECK_LINKS == 'true'
        run: |
          echo "Linkcheck Results:" > linkcheck-report.txt
          for file in linkcheck_results/*.txt; do
            echo "Results for $(basename "$file" .txt):" >> linkcheck-report.txt
            cat "$file" >> linkcheck-report.txt
            echo "--------------------" >> linkcheck-report.txt
          done

      - name: Display linkcheck output
        if: steps.check_commit.outputs.CHECK_LINKS == 'true'
        run: |
          cat linkcheck-report.txt

      - name: Process linkcheck results
        if: steps.check_commit.outputs.CHECK_LINKS == 'true'
        id: process_results
        run: |
          if grep -q "ERROR" linkcheck-report.txt; then
            echo "DEAD_LINKS_FOUND=true" >> $GITHUB_OUTPUT
            grep "ERROR" linkcheck-report.txt > dead_links.md
          else
            echo "DEAD_LINKS_FOUND=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request for dead links
        if: steps.check_commit.outputs.CHECK_LINKS == 'true' && steps.process_results.outputs.DEAD_LINKS_FOUND == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT }}
          commit-message: Remove dead links from README
          title: Remove dead links from README
          body: |
            This PR removes dead links found in the README.md file.
            Please review the changes and merge if appropriate.
          branch: remove-dead-links
          base: main

      - name: Update README after successful link check
        if: steps.check_commit.outputs.CHECK_LINKS == 'true'
        run: |
          sed -i '/Last checked on:/d' README.md
          echo -e "\nLast checked on: $(date +'%Y-%m-%d')" >> README.md
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add README.md
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update link check date in README [skip ci]" && git push)